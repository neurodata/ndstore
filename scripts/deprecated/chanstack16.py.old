# Copyright 2014 NeuroData (http://neurodata.io)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import os
import numpy as np
import urllib, urllib2
import cStringIO
#from PIL import Image
import zlib
import MySQLdb
from PIL import Image

sys.path += [os.path.abspath('../django')]
import OCP.settings
os.environ['DJANGO_SETTINGS_MODULE'] = 'OCP.settings'
from django.conf import settings

import ocpcaproj
import ocpcachannel
import ocpcadb
import zindex

"""Construct an image hierarchy up from a given resolution"""

class ChanStack:
  """Stack of multi-channel images."""

  def __init__(self, token):
    """Load the database and project"""

    projdb = ocpcaproj.OCPCAProjectsDB()
    self.proj = projdb.loadProject ( token )

    # Bind the annotation database
    self.chanDB = ocpcadb.OCPCADB ( self.proj )


  def buildStack ( self, startlevel ):
    """Build the hierarchy of images"""

    for  l in range ( startlevel, len(self.proj.datasetcfg.resolutions) ):

      for chnm, chid in self.chanDB.getChannels().iteritems():
        
        chan = int(chid)

        # Get the source database sizes
        [ximagesz, yimagesz] = self.proj.datasetcfg.imagesz [ l ]
        [xcubedim, ycubedim, zcubedim] = self.proj.datasetcfg.cubedim [ l ]

        biggercubedim = [xcubedim*2,ycubedim*2,zcubedim]

        # Get the slices
        [ startslice, endslice ] = self.proj.datasetcfg.slicerange
        slices = endslice - startslice + 1

        # Set the limits for iteration on the number of cubes in each dimension
        # RBTODO These limits may be wrong for even (see channelingest.py)
        import pdb; pdb.set_trace()
        xlimit = ( (ximagesz-1) / (xcubedim+1) )
        xlimit = ( ximagesz / xcubedim )
        ylimit = ( (yimagesz-1) / (ycubedim+1) )
        ylimit2 = ( yimagesz / ycubedim )
        #  Round up the zlimit to the next larger
        zlimit = (((slices-1)/zcubedim+1)*zcubedim)/zcubedim 
        ylimit = 16

        cursor = self.chanDB.conn.cursor()

        for z in range(zlimit):
          for y in range(ylimit):
            self.chanDB.conn.commit()
            for x in range(xlimit):

              # cutout the data at the -1 resolution
              print x,y,z
              olddata = self.chanDB.cutout ( [ x*2*xcubedim, y*2*ycubedim, z*zcubedim ], biggercubedim, l-1, chan ).data
              # target array for the new data (z,y,x) order
              newdata = np.zeros([zcubedim,ycubedim,xcubedim], dtype=np.uint16)

              for sl in range(zcubedim):

                # resize the image
                #newimage = cv2.resize ( olddata[sl,:,:], (xcubedim,ycubedim) ) 
                slimage = Image.frombuffer ( 'I;16', (xcubedim*2,ycubedim*2), olddata[sl,:,:].flatten(), 'raw', 'I;16', 0, 1 ) 
                newimage = slimage.resize ( [xcubedim,ycubedim] )

                # Put to a new cube
                newdata[sl,:,:] = np.asarray ( newimage )
                 
                # Compress the data
                outfobj = cStringIO.StringIO ()
                np.save ( outfobj, newdata )
                zdataout = zlib.compress (outfobj.getvalue())
                outfobj.close()

              key = zindex.XYZMorton ( [x,y,z] )
              
              # put in the database
              sql = "INSERT INTO res" + str(l) + "(channel, zindex, cube) VALUES (%s, %s, %s)"
              print sql % (chan,key,0)
              try:
                cursor.execute ( sql, (chan,key,zdataout))
              except MySQLdb.Error, e:
                print "Failed insert %d: %s. sql=%s" % (e.args[0], e.args[1], sql)

        self.chanDB.conn.commit()

def main():

  parser = argparse.ArgumentParser(description='Build an image stack')
  parser.add_argument('token', action="store", help='Token for the project.')
  parser.add_argument('resolution', action="store", type=int, help='Start (highest) resolution to build')
  
  result = parser.parse_args()

  # Create the annotation stack
  chanstack = ChanStack ( result.token )

  # Iterate over the database creating the hierarchy
  chanstack.buildStack ( result.resolution )
  


if __name__ == "__main__":
  main()

